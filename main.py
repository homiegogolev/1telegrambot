from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ö–Ω–æ–ø–∫–∏
start_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å –ø–ª–∞–Ω üí™", callback_data="get_plan"))
sub_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ", callback_data="subscribed"))
ready_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚ú®", callback_data="ready"))
yes_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–î–∞, —Ö–æ—á—É –ø—Ä–æ–≥—Ä–∞–º–º—É üî•", callback_data="yes_program"))
buy_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≥", url="https://t.me/fake_payment_link"))

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    text = "–ü—Ä–∏–≤–µ—Ç!ü§ç\n–ï—Å–ª–∏ —Ç—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç —Ç—ã –≥–æ—Ç–æ–≤–∞ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –º–µ—á—Ç–∞—Ç—å –æ –∫—Ä–∞—Å–∏–≤–æ–π —Ñ–∏–≥—É—Ä–µ –∏ –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–ª—É—á–∏—Ç—å –µ—ë.\n\n–ù–∞–∂–∏–º–∞–π ¬´–ó–∞–±—Ä–∞—Ç—å –ø–ª–∞–Ω¬ª!"
    await message.answer(text, reply_markup=start_kb)

@dp.callback_query_handler(lambda c: c.data == "get_plan")
async def get_plan(callback: types.CallbackQuery):
    await callback.message.answer(
        "–Ø –õ–∏—Å–∞, —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º. –ó–∞–ø–∏—Å–∞–ª–∞ –¥–ª—è —Ç–µ–±—è –≤–∏–¥–µ–æ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø–ª–∞–Ω–æ–º. –ü–æ–ª—É—á–∏ –µ–≥–æ ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/fakechannel",
        reply_markup=sub_kb)

@dp.callback_query_handler(lambda c: c.data == "subscribed")
async def subscribed(callback: types.CallbackQuery):
    await callback.message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ –Ω–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ' –∏ –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å üéÅ",
        reply_markup=ready_kb)

@dp.callback_query_handler(lambda c: c.data == "ready")
async def ready(callback: types.CallbackQuery):
    await callback.message.answer(
        "–í–æ—Ç –∏ –±–æ–Ω—É—Å: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∞–∑–æ–±–µ–¥—Ä–µ–Ω–Ω—ã—Ö —Å—É—Å—Ç–∞–≤–æ–≤ üí•
–£–±–∏—Ä–∞—é—Ç —É—à–∫–∏ –Ω–∞ –±–µ–¥—Ä–∞—Ö, —Å–Ω–∏–∂–∞—é—Ç –æ—Ç—ë–∫–∏, —É–ª—É—á—à–∞—é—Ç –ª–∏–º—Ñ–æ—Ç–æ–∫.")
    await callback.message.answer(
        "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ ¬´–ü–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã¬ª?
–ù–∞–ø–∏—à–∏ ¬´–î–∞¬ª –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=yes_kb)

@dp.callback_query_handler(lambda c: c.data == "yes_program")
async def yes_program(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–ü–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã¬ª ‚Äî —ç—Ç–æ:
‚Ä¢ 8 –Ω–µ–¥–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–µ–π
‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å—ã –Ω–∞ –∂–∏–≤–æ—Ç
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ —á–∞—Ç–µ
üî• 4500‚ÇΩ –≤–º–µ—Å—Ç–æ 5500‚ÇΩ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤!",
        reply_markup=buy_kb)

@dp.message_handler(commands=["faq"])
async def faq(message: types.Message):
    await message.answer("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:
1. –°–∫–æ–ª—å–∫–æ –¥–ª–∏—Ç—Å—è –∫—É—Ä—Å?
2. –ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –æ–ø–ª–∞—Ç—É?
3. –ï—Å—Ç—å –ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞?

–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ–º–æ–≥—É!")

@dp.message_handler(commands=["help", "–∑–∞–¥–∞—Ç—å–≤–æ–ø—Ä–æ—Å"])
async def help_cmd(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å—é–¥–∞ ‚Äî —è –∏–ª–∏ –º–æ—è –∫–æ–º–∞–Ω–¥–∞ —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏–º üí¨")

if __name__ == "__main__":
    executor.start_polling(dp)
