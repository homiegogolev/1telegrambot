import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

start_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ó–∞–±—Ä–∞—Ç—å –ø–ª–∞–Ω üí™", callback_data="get_plan"))
sub_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚úÖ", callback_data="subscribed"))
ready_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚ú®", callback_data="ready"))
yes_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–î–∞, —Ö–æ—á—É –ø—Ä–æ–≥—Ä–∞–º–º—É üî•", callback_data="yes_program"))
buy_kb = InlineKeyboardMarkup().add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ üí≥", url="https://t.me/fake_payment_link"))

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!ü§ç\n–ù–∞–∂–∏–º–∞–π ¬´–ó–∞–±—Ä–∞—Ç—å –ø–ª–∞–Ω¬ª!", reply_markup=start_kb)

@dp.callback_query_handler(lambda c: c.data == "get_plan")
async def get_plan(callback: types.CallbackQuery):
    await callback.message.answer("–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/fakechannel", reply_markup=sub_kb)

@dp.callback_query_handler(lambda c: c.data == "subscribed")
async def subscribed(callback: types.CallbackQuery):
    await callback.message.answer("–ù–∞–ø–∏—à–∏ '–ì–æ—Ç–æ–≤–æ' –∏ –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å üéÅ", reply_markup=ready_kb)

@dp.callback_query_handler(lambda c: c.data == "ready")
async def ready(callback: types.CallbackQuery):
    await callback.message.answer("–í–æ—Ç –∏ –±–æ–Ω—É—Å: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å –¢–ë–° üí•")
    await callback.message.answer("–•–æ—á–µ—à—å –ø–æ–ª–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É? –ù–∞–ø–∏—à–∏ ¬´–î–∞¬ª –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=yes_kb)

@dp.callback_query_handler(lambda c: c.data == "yes_program")
async def yes_program(callback: types.CallbackQuery):
    await callback.message.answer("–ü—Ä–æ–≥—Ä–∞–º–º–∞ ¬´–ü–µ—Å–æ—á–Ω—ã–µ —á–∞—Å—ã¬ª: 8 –Ω–µ–¥–µ–ª—å, –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –∂–∏–≤–æ—Ç, —Ü–µ–Ω–∞ ‚Äî 4500‚ÇΩ üî•", reply_markup=buy_kb)

@dp.message_handler(commands=["faq"])
async def faq(message: types.Message):
    await message.answer("–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã: ...")

@dp.message_handler(commands=["help", "–∑–∞–¥–∞—Ç—å–≤–æ–ø—Ä–æ—Å"])
async def help_cmd(message: types.Message):
    await message.answer("–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî —è –ø–æ–º–æ–≥—É üí¨")

if __name__ == "__main__":
    executor.start_polling(dp)
